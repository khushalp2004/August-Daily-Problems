
///1504. Count Submatrices With All Ones
method-1 using dp and Recursion
int numSubmat(vector<vector<int>>& mat) {
        int m = mat.size();
        int n = mat[0].size();

        vector<vector<int>> t(m, vector<int>(n, 0));

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (mat[i][j] == 1) {
                    if(j==0){
                        t[i][j]=1;
                    }else{
                        t[i][j]=t[i][j-1]+1;
                    }
                }
            }
        }

        int result = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (mat[i][j] == 1) {
                    int width = t[i][j];
                    for (int k = i; k >= 0 && width > 0; k--) {
                        width = min(width, t[k][j]);
                        result += width;
                    }
                }
            }
        }

        return result;
    }

    ///method-2-using stack (better)
    class Solution {
public:
    int numSubmat(vector<vector<int>>& mat) {
        int m = mat.size(), n = mat[0].size();
        vector<int> heights(n, 0);
        int result = 0;

        for (int i = 0; i < m; i++) {
            // update histogram heights
            for (int j = 0; j < n; j++) {
                if (mat[i][j] == 0) heights[j] = 0;
                else heights[j] += 1;
            }

            // monotonic stack for counting
            stack<int> st;
            vector<int> sum(n, 0);  // sum[j] = number of submatrices ending at column j

            for (int j = 0; j < n; j++) {
                while (!st.empty() && heights[st.top()] >= heights[j]) {
                    st.pop();
                }

                if (!st.empty()) {
                    int prev = st.top();
                    sum[j] = sum[prev] + heights[j] * (j - prev);
                } else {
                    sum[j] = heights[j] * (j + 1);
                }

                st.push(j);
                result += sum[j];
            }
        }

        return result;
    }
};

