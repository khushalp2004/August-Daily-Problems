
//36. Valid Sudoku
////method-1 using set and check duplicate if duplicate then return false-validate for row,col and 3x3 grid
bool isValidSudoku(vector<vector<char>>& board) {
        int m=board.size();
        int n=board[0].size();

        //validate rows
        for(int row=0;row<9;row++){
            set<char> st;
            for(int col=0;col<9;col++){
                char ch=board[row][col];
                if(ch=='.'){
                    continue;
                }
                if(st.count(ch)){
                    return false;
                }
                st.insert(ch);
            } 
        }
        //validate cols
        for(int col=0;col<9;col++){
            set<char> st;
            for(int row=0;row<9;row++){
                char ch=board[row][col];
                if(ch=='.'){
                    continue;
                }
                if(st.count(ch)){
                    return false;
                }
                st.insert(ch);
            }
        }
        //validate grid
        for(int boxRow=0;boxRow<9;boxRow+=3){
            for(int boxCol=0;boxCol<9;boxCol+=3){
                set<char> st;
                for(int row=0;row<3;row++){
                    for(int col=0;col<3;col++){
                        char ch=board[boxRow+row][boxCol+col];
                        if(ch=='.'){
                            continue;
                        }
                        if(st.count(ch)){
                            return false;
                        }
                        st.insert(ch);
                    }
                }
            }
        }
        return true;
    }

    //method-1b using unordered set
    bool isValidSudoku(vector<vector<char>>& board) {
        int m=board.size();
        int n=board[0].size();

        //validate rows
        for(int row=0;row<9;row++){
            unordered_set<char> st;
            for(int col=0;col<9;col++){
                char ch=board[row][col];
                if(ch=='.'){
                    continue;
                }
                if(st.find(ch)!=st.end()){
                    return false;
                }
                st.insert(ch);
            } 
        }
        //validate cols
        for(int col=0;col<9;col++){
            unordered_set<char> st;
            for(int row=0;row<9;row++){
                char ch=board[row][col];
                if(ch=='.'){
                    continue;
                }
                if(st.find(ch)!=st.end()){
                    return false;
                }
                st.insert(ch);
            }
        }
        //validate grid
        for(int boxRow=0;boxRow<9;boxRow+=3){
            for(int boxCol=0;boxCol<9;boxCol+=3){
                unordered_set<char> st;
                for(int row=0;row<3;row++){
                    for(int col=0;col<3;col++){
                        char ch=board[boxRow+row][boxCol+col];
                        if(ch=='.'){
                            continue;
                        }
                        if(st.find(ch)!=st.end()){
                            return false;
                        }
                        st.insert(ch);
                    }
                }
            }
        }
        return true;
    }

    //method-2(new logic)

    bool isValidSudoku(vector<vector<char>>& board) {
        unordered_set<string> st;
        for(int i=0;i<9;i++){
            for(int j=0;j<9;j++){
                char ch=board[i][j];
                if(ch=='.'){
                    continue;
                }
                string row=string(1,ch)+"_ROW"+to_string(i);
                string col=string(1,ch)+"_COL"+to_string(j);
                string box=string(1,ch)+"_BOX"+to_string(i/3)+"_"+to_string(j/3);
                if(st.find(row)!=st.end() || st.find(col)!=st.end() || st.find(box)!=st.end()){
                    return false;
                }
                st.insert(row);
                st.insert(col);
                st.insert(box);
            }
        }
        return true;
    }