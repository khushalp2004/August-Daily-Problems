
////837. New 21 Game

double new21Game(int n, int k, int maxPts) {
        vector<double> dp(n+maxPts+1,-1.0);
        return helper(0,n,k,maxPts,dp);
    }

    double helper(int score,int n, int k, int maxPts, vector<double> &dp){
        if(score>=k){
            return score<=n ? 1.0 : 0.0;
        }

        if(dp[score]!=-1.0){
            return dp[score];
        }

        double prob=0.0;
        for(int i=1;i<=maxPts;i++){
            prob+=helper(score+i,n,k,maxPts,dp);
        }

        dp[score]=prob/maxPts;
        return dp[score];
    }       ///but this solution gets Time Limit Exceeded

    ///method-2 Sliding Window
    double new21Game(int n, int k, int maxPts) {
        if(k==0 || n>=k+maxPts-1){
            return 1.0;
        }

        vector<double> dp(n+1,0.0);

        dp[0]=1.0;


        double windowSum=1.0;
        double ans=0.0;

        for(int i=1;i<=n;i++){
            dp[i]=windowSum/maxPts;

            if(i<k){
                windowSum+=dp[i];
            }else{
                ans+=dp[i];
            }

            if(i-maxPts>=0){
                windowSum-=dp[i-maxPts];
            }
        }
        return ans;
    }